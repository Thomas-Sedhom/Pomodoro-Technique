name: CI/CD Pipline
# This sets the name of the GitHub Actions workflow to "CI/CD"
on:
  push:
      branches:
         -  master
         # This section defines the trigger for the workflow. In this case, it will run whenever a push is made to the main branch.
jobs:

   lint-and-test:
      runs-on: ubuntu-latest
      #  This starts the definition of the first job, called "lint-and-test". The runs-on: ubuntu-latest line specifies that this job will run on an Ubuntu Linux virtual environment.
      steps:
         -  name: Checkout code
            uses: actions/checkout@v4
            # This step checks out the repository's code onto the virtual environment

         -  name: set up python
            uses: actions/setup-python@v5
            with:
               python-version: "3.9" 
            # This step sets up the Python environment, installing Python version 3.9.

         -  name: install dependecies
            run:
               python -m pip install --upgrade pip
               pip install -r requirements.txt
               # This step installs the Python dependencies specified in the requirements.txt file.

         -  name: lint the code 
            run: flake8 .
            # runs the flake8 linter on the codebase
         
         -  name: Run tests 
            run: python -m unittest discover tests/
            # This step runs the test suite located in the tests/ directory.

   build-and-push:
      needs: lint-and-test
      runs-on: ubuntu-latest
      # This starts the definition of the second job, called "build-and-push". The needs: lint-and-test line specifies that this job depends on the successful completion of the "lint-and-test" job.

      steps:
         -  name: Chekout code 
            uses: actions/checkout@v4
            # This step checks out the repository's code onto the virtual environment
      
         -  name: Set up Docker Buildx
            uses: docker-practice/actions-setup-docker@master
            # This step sets up the Docker Buildx tool, which allows for more advanced Docker builds.

         -  name: Log in to Dockerhub
            uses: docker/login-action@v1
            with:
               username: ${{ secrets.DOCKERHUB_USERNAME }}
               password: ${{ secrets.DOCKERHUB_TOKEN }}
               # This step logs in to DockerHub using the DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets.

         -  name: Build And Push
            id: docker_build
            uses: docker/build-push-action@v2
            with:
               push: true
               tags: |
                  ${{ secrets.DOCKERHUB_USERNAME }}/pomd:latest
            # run: docker push thomasrsc/pomodoro
            #  builds the Docker image and pushes it to DockerHub with the latest tag.

         -  name: image digest
            run: echo ${{ steps.docker_build.outputs.digest}}
            # logs the digest of the Docker image that was just pushed
   
   publish-tagged-image:
      needs: build-and-push
      if: startsWith(github.ref, 'refs/tags/')
      runs-on: ubuntu-latest

      steps:
         -  name: Chekout code
            uses:   actions/checkout@v4
            # checks out the repository's code onto the virtual environment

         -  name: Set up Docker Buildx
            uses:  docker-practice/actions-setup-docker@master
            # sets up the Docker Buildx tool.

         -  name: Login to DockerHub
            uses: docker/login-action@v1
            with: 
               username: ${{ secrets.DOCKERHUB_USERNAME }}
               password: ${{ secrets.DOCKERHUB_TOKEN }}
            # logs in to DockerHub using the DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets.

         -  name: Build and push
            id: docker_build
            uses: docker/build-push-action@v2
            with: 
               push: true
               tags:  |
                  ${{ secrets.DOCKERHUB_USERNAME }}/pomd:${{ github.ref_name }}
            # builds the Docker image and pushes it to DockerHub with a tag corresponding to the git tag.

         -  name: Image digest
            run: echo ${{ steps.docker_build.outputs.digest }}


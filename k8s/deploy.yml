# Namespace
# A namespace in Kubernetes is a way to divide cluster resources between multiple users 
# (via resource quotas). It provides a mechanism for isolating groups of resources within a single 
# cluster. Namespaces are like virtual clusters within a Kubernetes cluster, 
# allowing you to organize and manage your resources more effectively.
apiVersion: v1
kind: Namespace
metadata:
  name: pomdoro-namespace
---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pomdoro-deployment
  namespace: pomdoro-namespace

spec:
  replicas: 3

  selector:
    matchLabels:
      app: pomdoro

  template:
    metadata:
      labels:
        app: pomdoro
        
    spec:
      containers:
        - name: pomdoro
          image: thomasrsc/pomd
          ports:
            - containerPort: 5000
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: pomdoro-service
  namespace: pomdoro-namespace
spec:
  selector:
    app: pomdoro
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pomdoro-ingress
  namespace: pomdoro-namespace
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: pomdoro.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pomdoro-service
            port:
              number: 5000

---
# Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: pomdoro-namespace
  name: pomdoro-role
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "watch", "list"]
---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pomdoro-rolebinding
  namespace: pomdoro-namespace
subjects:
- kind: ServiceAccount
  name: default
  namespace: pomdoro-namespace
roleRef:
  kind: Role
  name: pomdoro-role
  apiGroup: rbac.authorization.k8s.io


# to run this file: kubectl apply -f pods.yml 
# to delete pod: kubectl delete pod pod-name
# to get all pods: kubectl pgt pod
# to get all pods for your namespace: kubectl get pods -n pomdoro-namespace